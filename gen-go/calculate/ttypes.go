// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package calculate

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var GoUnusedProtection__ int

type Operation int64

const (
	Operation_ADD      Operation = 0
	Operation_SUB      Operation = 1
	Operation_DIVIDE   Operation = 2
	Operation_MULTIPLY Operation = 3
)

func (p Operation) String() string {
	switch p {
	case Operation_ADD:
		return "ADD"
	case Operation_SUB:
		return "SUB"
	case Operation_DIVIDE:
		return "DIVIDE"
	case Operation_MULTIPLY:
		return "MULTIPLY"
	}
	return "<UNSET>"
}

func OperationFromString(s string) (Operation, error) {
	switch s {
	case "ADD":
		return Operation_ADD, nil
	case "SUB":
		return Operation_SUB, nil
	case "DIVIDE":
		return Operation_DIVIDE, nil
	case "MULTIPLY":
		return Operation_MULTIPLY, nil
	}
	return Operation(0), fmt.Errorf("not a valid Operation string")
}

func OperationPtr(v Operation) *Operation { return &v }

func (p Operation) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *Operation) UnmarshalText(text []byte) error {
	q, err := OperationFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}
